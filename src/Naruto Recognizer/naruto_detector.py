# -*- coding: utf-8 -*-
"""Naruto detector

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X8xUuOUBtQrjYXnW6A880A_F2BpAxJJ8
"""

from zipfile import ZipFile

fname = 'Data.zip'

with ZipFile(fname, 'r') as zip:
  zip.extractall()
  print('Done Extracting')

import tensorflow as tf
import matplotlib.pyplot as plt

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_dir = 'Images/Training'
test_dir = 'Images/Validation'

train_datagen = ImageDataGenerator(
    rescale = 1./255,
    # horizontal_flip = True,
    # rotation_range = 20,
    # zoom_range = [0.8, 1.2],
    # height_shift_range = 0.2,
    # width_shift_range = 0.2
    )

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size = (100, 100),
    batch_size = 32,
    class_mode = 'categorical',
    color_mode = 'rgb'

)

validation_datagen = ImageDataGenerator(rescale = 1./255)

validation_generator = train_datagen.flow_from_directory(
    test_dir,
    target_size = (100, 100),
    batch_size = 32,
    class_mode = 'categorical',
    color_mode = 'rgb'

)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

x, y = next(train_generator)

plt.figure(figsize = (10,10))
for i in range(0,16):
  plt.subplot(4, 4, i+1)
  plt.imshow(x[i], cmap = None)
  labels = ['Adult', 'Teen', 'Young']
  label = labels[list(y[i]).index(1.0)]
  plt.xlabel(str(label), color = 'white')
  plt.xticks([])
  plt.yticks([])

print(x.shape)
print(y.shape)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs = {}):
    if logs.get('acc') > 0.989:
      print('Reached 98.9% accuracy !')
      self.model.stop_training = True


callback = myCallback()

model = tf.keras.models.Sequential([
                             tf.keras.layers.Conv2D(16, (3,3), activation = 'relu', input_shape = (100, 100, 3)),
                             tf.keras.layers.MaxPooling2D(2,2),
                             tf.keras.layers.Conv2D(32, (3,3), activation = 'relu'),
                             tf.keras.layers.MaxPooling2D(2,2),

                             tf.keras.layers.Flatten(),
                             tf.keras.layers.Dense(32, activation = 'relu'),
                             tf.keras.layers.Dense(32, activation = 'relu'),
                             tf.keras.layers.Dense(3, activation = 'softmax')
])

from tensorflow.keras.optimizers import RMSprop

model.compile(
    loss = 'categorical_crossentropy',
    optimizer = RMSprop(lr= 3e-4),
    metrics = ['acc']
)

model.summary()

history = model.fit_generator(
    train_generator,
    epochs = 50,   
    verbose = 1,
    steps_per_epoch = 1234//32,
    callbacks = [callback]
)

loss = history.history['loss']
acc = history.history['acc']
epoch = [d for d in range(1, 32)]

plt.figure(figsize = (10, 10))
plt.subplot(3,3,1)
plt.plot(epoch, acc)
plt.subplot(1,3,2)
plt.plot(loss, acc)
plt.subplot(1,3,3)
plt.plot(epoch, loss)

model.save('Naruto_age_detector.h5')

import numpy as np


x,y = next(validation_generator)
preds = np.array(model.predict(x), dtype = 'float')
a = 0
plt.imshow(x[a])
print('Ground Truth: ', y[a])
print('Predicted Value: ', np.where(preds[a]==max(preds[a]),1, 0))

loss, accuracy= model.evaluate_generator(validation_generator)

print(preds[0])

print('Loss: ', loss)
print('accuracy: {}%'.format(accuracy*100))

